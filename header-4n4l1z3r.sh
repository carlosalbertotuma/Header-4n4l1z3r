#!/bin/bash

banner()
{

    echo '                      _             _  _         _  _   _ _     _____      '
    echo '  /\  /\___  __ _  __| | ___ _ __  | || |  _ __ | || | | / |___|___ / _ __ '
    echo ' / /_/ / _ \/ _` |/ _` |/ _ \  __| | || |_|  _ \| || |_| | |_  / |_ \|  __|'
    echo '/ __  /  __/ (_| | (_| |  __/ |    |__   _| | | |__   _| | |/ / ___) | |   '
    echo '\/ /_/ \___|\__,_|\__,_|\___|_|       |_| |_| |_|  |_| |_|_/___|____/|_|   '
    echo '                                                                           '    
    echo "Desenvolvido por Carlos Tuma - Bl4dsc4n - Version 0.1"
    echo
    
}

modouso()
{
    echo -e "\e[31m[ERRO] Uso: $0 <URL>\e[0m"
}

# Verifica se a URL foi passada como argumento
if [ -z "$1" ]; then
    banner
    modouso
    exit 1
fi

URL="$1"

# Lista de headers de seguran√ßa recomendados
HEADERS_RECOMENDADOS=(
    "Content-Security-Policy"
    "X-Frame-Options"
    "X-XSS-Protection"
    "X-Content-Type-Options"
    "Strict-Transport-Security"
    "Referrer-Policy"
    "Permissions-Policy"
    "Expect-CT"
)

# Fun√ß√£o para descrever o prop√≥sito de cada header
declare -A HEADER_DESCRICAO
HEADER_DESCRICAO=(
    ["Content-Security-Policy"]="Define as fontes permitidas para conte√∫do como scripts e imagens, prevenindo inje√ß√µes de c√≥digo."
    ["X-Frame-Options"]="Impedir que o conte√∫do seja exibido dentro de frames ou iframes, mitigando ataques clickjacking."
    ["X-XSS-Protection"]="Ativa prote√ß√£o contra ataques de cross-site scripting (XSS)."
    ["X-Content-Type-Options"]="Evita que o navegador tente adivinhar o tipo de conte√∫do, ajudando a prevenir ataques de MIME sniffing."
    ["Strict-Transport-Security"]="For√ßa a comunica√ß√£o segura via HTTPS, prevenindo ataques man-in-the-middle."
    ["Referrer-Policy"]="Controla as informa√ß√µes do referenciador enviadas nas requisi√ß√µes HTTP, protegendo a privacidade."
    ["Permissions-Policy"]="Controla o acesso a recursos espec√≠ficos do navegador, como geolocaliza√ß√£o ou c√¢mera."
    ["Expect-CT"]="For√ßa a verifica√ß√£o de certificados de seguran√ßa em rela√ß√£o ao site."
)

# Captura headers da resposta HTTP
RESPONSE_HEADERS=$(curl -s -I --http2 --max-time 10 "$URL")

# Verifica se a URL est√° acess√≠vel
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
if [ "$HTTP_STATUS" -ge 400 ]; then
    echo -e "\e[31m[ERRO] O site retornou um c√≥digo HTTP $HTTP_STATUS. Verifique a URL.\e[0m"
    exit 1
fi

# Exibir headers obtidos
banner
echo -e "\nüîé \e[34mAnalisando headers de resposta para:\e[0m $URL\n"
echo -e "üìú \e[34mHeaders encontrados:\e[0m\n$RESPONSE_HEADERS"

# Verificar headers presentes
echo -e "\n‚úÖ \e[32mHeaders presentes:\e[0m\n"
for HEADER in "${HEADERS_RECOMENDADOS[@]}"; do
    if echo "$RESPONSE_HEADERS" | grep -i -q "^$HEADER:"; then
        echo -e "‚úÖ \e[32m$HEADER:\e[0m ${HEADER_DESCRICAO[$HEADER]}"
    fi
done

# Verificar headers ausentes
echo -e "\n‚ö†Ô∏è \e[32m**Vulnerabilidade detectada**: (CWE: 693) CVSS3 Score: 3.1 LOW\e[0m"
echo -e "\nüö® \e[31mHeaders de seguran√ßa ausentes:\e[0m\n"
MISSING_HEADERS=0
for HEADER in "${HEADERS_RECOMENDADOS[@]}"; do
    if ! echo "$RESPONSE_HEADERS" | grep -i -q "^$HEADER:"; then
        echo -e "‚ùå \e[31m$HEADER (Faltando)\e[0m"
        ((MISSING_HEADERS++))
    fi
done

if [ "$MISSING_HEADERS" -eq 0 ]; then
    echo -e "‚úÖ \e[32mTodos os headers de seguran√ßa essenciais est√£o presentes!\e[0m"
fi

# Sugest√µes para headers ausentes
echo -e "\nüí° \e[33mSugest√µes de melhorias:\e[0m\n"

declare -A SUGESTOES=(
    ["X-Frame-Options"]="Impedir que o conte√∫do do seu site seja carregado em um frame ou iframe em sites de terceiros, protegendo contra ataques de clickjacking (onde o usu√°rio √© enganado a clicar em elementos ocultos ou maliciosos)."
    
    ["Referrer-Policy"]="Controla a quantidade de informa√ß√µes de referenciador enviadas em requisi√ß√µes HTTP, protegendo a privacidade do usu√°rio e evitando a exposi√ß√£o de informa√ß√µes sens√≠veis, como a URL original de onde a requisi√ß√£o foi feita."
    
    ["Permissions-Policy"]="Define as permiss√µes de acesso a recursos sens√≠veis do navegador, como geolocaliza√ß√£o, c√¢mera e microfone, impedindo que sites maliciosos acessem essas funcionalidades sem o consentimento do usu√°rio."
    
    ["Expect-CT"]="For√ßa a verifica√ß√£o de certificados TLS e garante que os certificados utilizados pelo site estejam listados em um log de certifica√ß√£o p√∫blica (CT), prevenindo ataques como ataques de certifica√ß√£o falsificada."
    
    ["Cross-Origin-Embedder-Policy"]="Refor√ßa seguran√ßa contra embeddings n√£o confi√°veis, controlando o carregamento de recursos de diferentes origens."
    
    ["Cross-Origin-Opener-Policy"]="Refor√ßa isolamento de contexto entre origens, garantindo que scripts n√£o possam acessar dados de outras origens."
    
    ["Cross-Origin-Resource-Policy"]="Restringe quais sites podem carregar seus recursos, evitando o carregamento indesejado por sites n√£o confi√°veis."
    
    ["CORS"]="Define pol√≠ticas de compartilhamento de recursos entre origens diferentes, controlando quais sites podem acessar os recursos da sua aplica√ß√£o."
)

declare -A POLITICAS=(
    ["X-Frame-Options"]="DENY"
    ["Referrer-Policy"]="no-referrer"
    ["Permissions-Policy"]="geolocation=(), microphone=(), camera=()"
    ["Expect-CT"]="max-age=86400, enforce"
    ["Cross-Origin-Embedder-Policy"]="require-corp"
    ["Cross-Origin-Opener-Policy"]="same-origin"
    ["Cross-Origin-Resource-Policy"]="same-origin"
    ["CORS"]="https://exemplo.com"
)

for header in "${!SUGESTOES[@]}"; do
    # Primeira linha amarela com o nome do header
    echo -e "‚ö†Ô∏è Adicione \033[33m$header\033[0m para melhorar a seguran√ßa:"
    
    # Descri√ß√£o do header
    echo -e "${SUGESTOES[$header]}"
    
    # Linha "Para definir o header" em amarelo com o valor real do header
    echo -e "\033[32mPara definir o header:\033[0m \033[33m$header: ${POLITICAS[$header]}\033[0m"
    echo
done





#for HEADER in "${HEADERS_RECOMENDADOS[@]}"; do
#    if ! echo "$RESPONSE_HEADERS" | grep -i -q "^$HEADER:"; then
 #       echo -e "‚ö†Ô∏è \e[33mAdicione $HEADER para melhorar a seguran√ßa:\e[0m"
#        echo "   $HEADER: ${SUGESTOES[$HEADER]}"
#    fi
#done

# Analisando Pol√≠ticas de Cross-Origin

# Cross-Origin Embedder Policy (COEP)
if echo "$RESPONSE_HEADERS" | grep -qi "Cross-Origin-Embedder-Policy"; then
    echo -e "‚úÖ \e[32mCross-Origin-Embedder-Policy est√° presente.\e[0m Protege contra ataques de inje√ß√£o de recursos."
else
    echo -e "‚ö†Ô∏è \e[33mAdicione Cross-Origin-Embedder-Policy para refor√ßar seguran√ßa contra embeddings n√£o confi√°veis:\e[0m"
    echo "   Cross-Origin-Embedder-Policy: require-corp"
fi

# Cross-Origin Opener Policy (COOP)
if echo "$RESPONSE_HEADERS" | grep -qi "Cross-Origin-Opener-Policy"; then
    echo -e "‚úÖ \e[32mCross-Origin-Opener-Policy est√° presente.\e[0m Protege contra ataques de cross-origin."
else
    echo -e "‚ö†Ô∏è \e[33mAdicione Cross-Origin-Opener-Policy para refor√ßar isolamento de contexto:\e[0m"
    echo "   Cross-Origin-Opener-Policy: same-origin"
fi

# Cross-Origin Resource Policy (CORP)
if echo "$RESPONSE_HEADERS" | grep -qi "Cross-Origin-Resource-Policy"; then
    echo -e "‚úÖ \e[32mCross-Origin-Resource-Policy est√° presente.\e[0m Protege contra acesso indevido a recursos."
else
    echo -e "‚ö†Ô∏è \e[33mAdicione Cross-Origin-Resource-Policy para restringir quais sites podem carregar seus recursos:\e[0m"
    echo "   Cross-Origin-Resource-Policy: same-origin"
fi

# Cross-Origin Resource Sharing (CORS)
if echo "$RESPONSE_HEADERS" | grep -qi "Access-Control-Allow-Origin"; then
    echo -e "‚úÖ \e[32mCORS (Access-Control-Allow-Origin) est√° presente.\e[0m Controla acesso de outras origens."
else
    echo -e "‚ö†Ô∏è \e[33mAdicione CORS para definir pol√≠ticas de compartilhamento de recursos entre origens diferentes:\e[0m"
    echo "   Access-Control-Allow-Origin: https://exemplo.com"
fi

# Cross-Origin Read Blocking (CORB) (n√£o √© um header, mas pode ser mitigado)
echo -e "\nüîç \e[34mCORB (Cross-Origin Read Blocking) √© implementado automaticamente pelo Chrome para evitar leitura de conte√∫do sens√≠vel de outras origens.\e[0m"
echo "   Para mitiga√ß√£o extra, use Content-Type apropriado para arquivos sensiveis."


# Adicionar refer√™ncia a OWASP e SecurityHeaders
echo -e "\nüìö \e[34mRefer√™ncias para mais informa√ß√µes:\e[0m"
echo "   üîó https://owasp.org/www-project-secure-headers/"
echo "   üîó https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers"
echo "   üîó https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy"
echo "   üîó https://securityheaders.com/"

echo -e "\nüîö \e[34mAn√°lise conclu√≠da!\e[0m üöÄ\n"
